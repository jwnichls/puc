package edu.cmu.hcii.puc.devices.elevator;

/**
 * Base class for any event which can be generated by an Elevator.  This class
 * provides functionality for a timecode to be associated with each event,
 * automatically generated at the time the event is constructed.
 */
public abstract class ElevatorEvent
{

  // Instance fields

  private final long timecode;

  // Constructor

  public ElevatorEvent()
  {
    timecode = System.currentTimeMillis();
  }

  // Accessor

  public final long getTimecode() { return timecode; }

  // Inner classes

  // Categories of events

  /**
   * Does not add any functionality, just encapsulates type information
   */
  public static class ElevatorStatusEvent extends ElevatorEvent
  {
    public ElevatorStatusEvent() { super(); }
  }

  /**
   * Does not add any functionality, just encapsulates type information
   */
  public static class ButtonEvent extends ElevatorEvent
  {
    public ButtonEvent() { super(); }
  }

  /**
   * Events which are associated with a specific AbstractUser should extend
   * this event class.  UserEvent provides for an associated AbstractUser
   * to be specified at time of construction.
   */
  public static class UserEvent extends ElevatorEvent
  {

    public final AbstractUser user;

    public UserEvent(AbstractUser user)
    {
      super();
      this.user = user;
    }
  }

  // ElevatorStatusEvents

  public static class FloorReachedEvent extends ElevatorStatusEvent
  {
    public final int floor;

    public FloorReachedEvent(int floor)
    {
      super();
      this.floor = floor;
    }
  }

  public static class DirChangedEvent extends ElevatorStatusEvent
  {
    public final int dir;

    public DirChangedEvent(int dir)
    {
      super();
      this.dir = dir;
    }
  }

  public static class StartedMovingEvent extends ElevatorStatusEvent
  {
    public final int oldFloor;
    public final int newFloor;

    public StartedMovingEvent(int oldFloor, int newFloor)
    {
      super();
      this.oldFloor = oldFloor;
      this.newFloor = newFloor;
    }
  }

  public static class DoorOpenEvent extends ElevatorStatusEvent
  {
    public final boolean started;
    public final boolean isOpen;

    public DoorOpenEvent(boolean started, boolean isOpen)
    {
      super();
      this.started = started;
      this.isOpen = isOpen;
    }
  }

  // ButtonEvents

  public static class CallButtonEvent extends ButtonEvent
  {
    public final int floor;
    public final int dir;
    public final boolean newVal;

    public CallButtonEvent(int floor, int dir, boolean newVal)
    {
      super();
      this.floor = floor;
      this.dir = dir;
      this.newVal = newVal;
    }
  }

  public static class FloorRequestButtonEvent extends ButtonEvent
  {
    public final int floor;
    public final boolean newVal;

    public FloorRequestButtonEvent(int floor, boolean newVal)
    {
      super();
      this.floor = floor;
      this.newVal = newVal;
    }
  }

  public static class DoorOpenButtonEvent extends ButtonEvent
  {
    public final boolean newVal;

    public DoorOpenButtonEvent(boolean newVal)
    {
      super();
      this.newVal = newVal;
    }
  }

  public static class DoorCloseButtonEvent extends ButtonEvent
  {
    public final boolean newVal;

    public DoorCloseButtonEvent(boolean newVal)
    {
      super();
      this.newVal = newVal;
    }
  }

  // UserEvents

  public static class ExistenceEvent extends UserEvent
  {
    public final boolean exists;

    public ExistenceEvent(AbstractUser user, boolean exists)
    {
      super(user);
      this.exists = exists;
    }
  }

  public static class TeleportEvent extends UserEvent
  {
    public final int oldFloor;
    public final boolean wasInside;

    public TeleportEvent(AbstractUser user, int oldFloor, boolean wasInside)
    {
      super(user);
      this.oldFloor = oldFloor;
      this.wasInside = wasInside;
    }
  }

  public static class EnteringEvent extends UserEvent
  {
    public final boolean starting;

    public EnteringEvent(AbstractUser user, boolean starting)
    {
      super(user);
      this.starting = starting;
    }
  }

  public static class ExitingEvent extends UserEvent
  {
    public final boolean starting;

    public ExitingEvent(AbstractUser user, boolean starting)
    {
      super(user);
      this.starting = starting;
    }
  }

}